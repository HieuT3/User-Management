This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-06-18T14:56:57.174Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitattributes
.gitignore
.mvn/wrapper/maven-wrapper.properties
mvnw
mvnw.cmd
pom.xml
src/main/java/com/user/management/bootstrap/AdminAndRoleSeeder.java
src/main/java/com/user/management/config/SecurityConfig.java
src/main/java/com/user/management/constant/RoleEnum.java
src/main/java/com/user/management/constant/StatusEnum.java
src/main/java/com/user/management/controller/AuthController.java
src/main/java/com/user/management/controller/RoleController.java
src/main/java/com/user/management/controller/UserController.java
src/main/java/com/user/management/dto/request/LoginRequest.java
src/main/java/com/user/management/dto/request/RegistrationRequest.java
src/main/java/com/user/management/dto/request/RoleRequest.java
src/main/java/com/user/management/dto/request/UpdateStatusUserRequest.java
src/main/java/com/user/management/dto/request/UpdateUserRequest.java
src/main/java/com/user/management/dto/request/UserRequest.java
src/main/java/com/user/management/dto/response/ApiResponse.java
src/main/java/com/user/management/dto/response/ErrorResponse.java
src/main/java/com/user/management/dto/response/RegistrationResponse.java
src/main/java/com/user/management/dto/response/RoleResponse.java
src/main/java/com/user/management/dto/response/UserResponse.java
src/main/java/com/user/management/entity/Role.java
src/main/java/com/user/management/entity/User.java
src/main/java/com/user/management/exception/AppException.java
src/main/java/com/user/management/exception/ErrorCode.java
src/main/java/com/user/management/exception/GlobalExceptionHandler.java
src/main/java/com/user/management/mapper/RoleMapper.java
src/main/java/com/user/management/mapper/UserMapper.java
src/main/java/com/user/management/repository/RoleRepository.java
src/main/java/com/user/management/repository/UserRepository.java
src/main/java/com/user/management/RestApiForUserManagementApplication.java
src/main/java/com/user/management/security/CustomUserDetails.java
src/main/java/com/user/management/security/CustomUserDetailsService.java
src/main/java/com/user/management/service/AuthService.java
src/main/java/com/user/management/service/implement/AuthServiceImpl.java
src/main/java/com/user/management/service/implement/RoleServiceImpl.java
src/main/java/com/user/management/service/implement/UserServiceImpl.java
src/main/java/com/user/management/service/RoleService.java
src/main/java/com/user/management/service/UserService.java
src/main/resources/application.properties
src/main/resources/application.yaml
src/test/java/com/user/management/RestApiForUserManagementApplicationTests.java

================================================================
Repository Files
================================================================

================
File: .gitattributes
================
/mvnw text eol=lf
*.cmd text eol=crlf

================
File: .gitignore
================
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

================
File: mvnw
================
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

================
File: mvnw.cmd
================
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.user.management</groupId>
	<artifactId>REST-API-for-User-Management</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>REST-API-for-User-Management</name>
	<description>REST API for User Management using Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
		<org.mapstruct.version>1.6.3</org.mapstruct.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${org.mapstruct.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

================
File: src/main/java/com/user/management/bootstrap/AdminAndRoleSeeder.java
================
package com.user.management.bootstrap;

import com.user.management.constant.RoleEnum;
import com.user.management.entity.Role;
import com.user.management.entity.User;
import com.user.management.repository.RoleRepository;
import com.user.management.repository.UserRepository;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Component
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class AdminAndRoleSeeder implements ApplicationListener<ContextRefreshedEvent> {

    RoleRepository roleRepository;
    UserRepository userRepository;
    PasswordEncoder passwordEncoder;

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        loadRole();
        loadAdmin();
    }

    private void loadRole() {
        List<RoleEnum> roleTypes = List.of(RoleEnum.admin, RoleEnum.user);
        Map<RoleEnum, String> mp = Map.of(
                RoleEnum.admin, "This is the admin role, which has all permissions.",
                RoleEnum.user, "This is the user role, which has limited permissions."
        );
        roleTypes.forEach(
                roleEnum -> {
                    roleRepository.findRoleByRoleName(roleEnum).ifPresentOrElse(System.out::println, () -> {
                        Role role = new Role();
                        role.setRoleName(roleEnum);
                        role.setDescription(mp.get(roleEnum));
                        roleRepository.save(role);
                    });
                }
        );
    }

    private void loadAdmin() {
        if (userRepository.existsUserByUsername("admin")) return;
        Set<Role> roles = new HashSet<>(roleRepository.findAll());
        User user = new User();
        user.setFullName("ADMIN");
        user.setUsername("admin");
        user.setPassword(passwordEncoder.encode("Admin123456"));
        user.setEmail("admin@gmail.com");
        user.setPhone("0123456789");
        user.setAvatarUrl("URL");
        user.setRoles(roles);

        userRepository.save(user);
    }
}

================
File: src/main/java/com/user/management/config/SecurityConfig.java
================
package com.user.management.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration

public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(authorize ->
                        authorize.requestMatchers("/api/v1/auth/login").permitAll()
                                .requestMatchers("/api/v1/auth/register").permitAll()
                                .requestMatchers("/api/v1/roles/**").hasRole("ADMIN")
                                .anyRequest().authenticated()
                )
                .build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }
}

================
File: src/main/java/com/user/management/constant/RoleEnum.java
================
package com.user.management.constant;

public enum RoleEnum {
    admin,
    user
}

================
File: src/main/java/com/user/management/constant/StatusEnum.java
================
package com.user.management.constant;

public enum StatusEnum {
    active,
    nonactive
}

================
File: src/main/java/com/user/management/controller/AuthController.java
================
package com.user.management.controller;

import com.user.management.dto.request.LoginRequest;
import com.user.management.dto.request.RegistrationRequest;
import com.user.management.dto.response.ApiResponse;
import com.user.management.dto.response.RegistrationResponse;
import com.user.management.service.AuthService;
import jakarta.servlet.http.HttpServletRequest;

import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/v1/auth")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class AuthController {

    AuthService authService;

    @PostMapping("/login")
    public ResponseEntity<ApiResponse<Void>> login(
            @Valid @RequestBody LoginRequest loginRequest, HttpServletRequest httpServletRequest
    ) {
        log.info("Login request received for user: {}", loginRequest.getUsername());
        Authentication authentication = authService.login(loginRequest);
        SecurityContextHolder.getContext().setAuthentication(authentication);
        httpServletRequest.getSession(true);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Login successful")
                        .data(null)
                        .build()
        );
    }

    @PostMapping("/register")
    public ResponseEntity<ApiResponse<RegistrationResponse>> register(
            @Valid @RequestBody RegistrationRequest registrationRequest
            ) {
        log.info("Register request received for user: {}", registrationRequest.getUsername());
        RegistrationResponse registrationResponse = authService.register(registrationRequest);
        return ResponseEntity.ok(
                ApiResponse.<RegistrationResponse>builder()
                        .success(true)
                        .message("Registration successful")
                        .data(registrationResponse)
                        .build()
        );
    }
}

================
File: src/main/java/com/user/management/controller/RoleController.java
================
package com.user.management.controller;

import com.user.management.constant.RoleEnum;
import com.user.management.dto.request.RoleRequest;
import com.user.management.dto.response.ApiResponse;
import com.user.management.dto.response.RoleResponse;
import com.user.management.service.RoleService;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/roles")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class RoleController {

    RoleService roleService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<RoleResponse>>> getAllRoles() {
        log.info("Fetching all roles");
        List<RoleResponse> roles = roleService.getAllRoles();
        return ResponseEntity.ok(
                ApiResponse.<List<RoleResponse>>builder()
                        .success(true)
                        .data(roles)
                        .message("Roles fetched successfully")
                        .build()
        );
    }

    @GetMapping("{roleId}")
    public ResponseEntity<ApiResponse<RoleResponse>> getRoleById(@PathVariable("roleId") UUID roleId) {
        log.info("Fetching role with ID: {}", roleId);
        RoleResponse role = roleService.getRoleByRoleId(roleId);
        return ResponseEntity.ok(
                ApiResponse.<RoleResponse>builder()
                        .success(true)
                        .data(role)
                        .message("Role fetched successfully")
                        .build()
        );
    }

    @GetMapping("name/{roleName}")
    public ResponseEntity<ApiResponse<RoleResponse>> getRoleByName(@PathVariable("roleName") RoleEnum roleName) {
        log.info("Fetching role with name: {}", roleName);
        RoleResponse role = roleService.getRoleByRoleName(roleName);
        return ResponseEntity.ok(
                ApiResponse.<RoleResponse>builder()
                        .success(true)
                        .data(role)
                        .message("Role fetched successfully")
                        .build()
        );
    }

    @PostMapping("")
    public ResponseEntity<ApiResponse<RoleResponse>> addRole(
            @Valid @RequestBody RoleRequest roleRequest
    ) {
        log.info("Creating new role: {}", roleRequest);
        RoleResponse createdRole = roleService.addRole(roleRequest);
        return ResponseEntity.ok(
                ApiResponse.<RoleResponse>builder()
                        .success(true)
                        .data(createdRole)
                        .message("Role created successfully")
                        .build()
        );
    }

    @DeleteMapping("{roleId}")
    public ResponseEntity<ApiResponse<Void>> deleteRole(@PathVariable("roleId") UUID roleId) {
        log.info("Deleting role with ID: {}", roleId);
        roleService.softDeleteRoleByRoleId(roleId);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Role deleted successfully")
                        .build()
        );
    }

    @DeleteMapping("name/{roleName}")
    public ResponseEntity<ApiResponse<Void>> deleteRoleByName(@PathVariable("roleName") RoleEnum roleName) {
        log.info("Deleting role with name: {}", roleName);
        roleService.softDeleteRoleByRoleName(roleName);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("Role deleted successfully")
                        .build()
        );
    }
}

================
File: src/main/java/com/user/management/controller/UserController.java
================
package com.user.management.controller;

import com.user.management.dto.request.UpdateStatusUserRequest;
import com.user.management.dto.request.UpdateUserRequest;
import com.user.management.dto.request.UserRequest;
import com.user.management.dto.response.ApiResponse;
import com.user.management.dto.response.UserResponse;
import com.user.management.service.UserService;
import jakarta.validation.Valid;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/users")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class UserController {

    UserService userService;

    @GetMapping("")
    public ResponseEntity<ApiResponse<List<UserResponse>>> getAllUsers() {
        log.info("Fetching all users");
        List<UserResponse> userResponses = userService.getAllUsers();
        System.out.println(userResponses);
        return ResponseEntity.ok(
                ApiResponse.<List<UserResponse>>builder()
                        .success(true)
                        .message("Users fetched successfully")
                        .data(userResponses)
                        .build()
        );
    }

    @GetMapping("/{userId}")
    public ResponseEntity<ApiResponse<UserResponse>> getUserByUserId(
            @PathVariable("userId") UUID userId
    ) {
        log.info("Fetching user with ID: {}", userId);
        UserResponse userResponse = userService.getUserByUserId(userId);
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("User fetched successfully")
                        .data(userResponse)
                        .build()
        );
    }

    @PostMapping("")
    public ResponseEntity<ApiResponse<UserResponse>> addUser(
            @Valid @RequestBody UserRequest userRequest
    ) {
        log.info("Adding new user: {}", userRequest.getUsername());
        UserResponse userResponse = userService.addUser(userRequest);
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("User added successfully")
                        .data(userResponse)
                        .build()
        );
    }

    @PutMapping("/{userId}")
    public ResponseEntity<ApiResponse<UserResponse>> updateUserByUserId(
            @PathVariable("userId") UUID userId,
            @RequestBody UpdateUserRequest updateUserRequest
            ) {
        log.info("Updating user with ID: {}", userId);
        UserResponse userResponse = userService.updateUserByUserId(userId, updateUserRequest);
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("User updated successfully")
                        .data(userResponse)
                        .build()
        );
    }

    @PutMapping("/{userId}/status")
    public ResponseEntity<ApiResponse<UserResponse>> updateStatusUserByUserId(
            @PathVariable("userId") UUID userId,
            @Valid @RequestBody UpdateStatusUserRequest updateStatusUserRequest
            ) {
        log.info("Updating status for user with ID: {}", userId);
        UserResponse userResponse = userService.updateStatusUserByUserId(userId, updateStatusUserRequest);
        return ResponseEntity.ok(
                ApiResponse.<UserResponse>builder()
                        .success(true)
                        .message("User status updated successfully")
                        .data(userResponse)
                        .build()
        );
    }

    @DeleteMapping("/{userId}")
    public ResponseEntity<ApiResponse<Void>> softDeleteUserByUserId(
            @PathVariable("userId") UUID userId
    ) {
        log.info("Deleting user with ID: {}", userId);
        userService.deleteUserByUserId(userId);
        return ResponseEntity.ok(
                ApiResponse.<Void>builder()
                        .success(true)
                        .message("User deleted successfully")
                        .data(null)
                        .build()
        );
    }
}

================
File: src/main/java/com/user/management/dto/request/LoginRequest.java
================
package com.user.management.dto.request;

import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
@Setter
public class LoginRequest {
    @NotBlank(message = "Username is required")
    private String username;
    @NotBlank(message = "Password is required")
    private String password;
}

================
File: src/main/java/com/user/management/dto/request/RegistrationRequest.java
================
package com.user.management.dto.request;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
@Setter
public class RegistrationRequest {
    private String fullName;
    private String username;
    private String password;
    private String email;
    private String phone;
    private String avatarUrl;
}

================
File: src/main/java/com/user/management/dto/request/RoleRequest.java
================
package com.user.management.dto.request;

import com.user.management.constant.RoleEnum;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
@Setter
public class RoleRequest {
    @NotNull(message = "Role name is required")
    private RoleEnum roleName;
    private String description;
}

================
File: src/main/java/com/user/management/dto/request/UpdateStatusUserRequest.java
================
package com.user.management.dto.request;

import com.user.management.constant.StatusEnum;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
@Setter
public class UpdateStatusUserRequest {
    @NotNull
    private StatusEnum status;
}

================
File: src/main/java/com/user/management/dto/request/UpdateUserRequest.java
================
package com.user.management.dto.request;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
@Setter
public class UpdateUserRequest {
    private String fullName;
    private String email;
    private String phone;
    private String avatarUrl;
}

================
File: src/main/java/com/user/management/dto/request/UserRequest.java
================
package com.user.management.dto.request;

import com.user.management.constant.RoleEnum;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import java.util.List;
import java.util.Set;

@AllArgsConstructor
@Getter
@Setter
public class UserRequest {

    private String fullName;
    @NotBlank(message = "Username is required")
    private String username;

    @NotBlank(message = "Password is required")
    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$",
             message = "Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, and one digit")
    private String password;
    private String email;
    private String phone;
    private String avatarUrl;
    private Set<RoleEnum> roles;
}

================
File: src/main/java/com/user/management/dto/response/ApiResponse.java
================
package com.user.management.dto.response;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class ApiResponse <T> {
    private boolean success;
    private String message;
    private T data;
}

================
File: src/main/java/com/user/management/dto/response/ErrorResponse.java
================
package com.user.management.dto.response;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.*;

import java.time.LocalDateTime;
import java.util.Map;

@Builder
@Getter
@Setter
public class ErrorResponse {
    private String errorCode;
    private String message;
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime timestamp;
    String path;
    Map<String, String> errors;
}

================
File: src/main/java/com/user/management/dto/response/RegistrationResponse.java
================
package com.user.management.dto.response;

import com.user.management.constant.StatusEnum;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import java.util.Set;
import java.util.UUID;

@AllArgsConstructor
@Getter
@Setter
public class RegistrationResponse {
    private UUID userId;
    private String fullName;
    private String username;
    private String email;
    private String phone;
    private String avatarUrl;
    private StatusEnum status;
    private boolean isDeleted;
    private Set<RoleResponse> roles;
}

================
File: src/main/java/com/user/management/dto/response/RoleResponse.java
================
package com.user.management.dto.response;

import com.user.management.constant.RoleEnum;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import java.util.UUID;

@AllArgsConstructor
@Getter
@Setter
public class RoleResponse {
    private UUID roleId;
    private RoleEnum roleName;
    private String description;
}

================
File: src/main/java/com/user/management/dto/response/UserResponse.java
================
package com.user.management.dto.response;

import com.user.management.constant.StatusEnum;
import lombok.*;

import java.util.Set;
import java.util.UUID;

@Data
public class UserResponse {
    private UUID userId;
    private String fullName;
    private String username;
    private String email;
    private String phone;
    private String avatarUrl;
    private StatusEnum status;
    private boolean isDeleted;
    private Set<RoleResponse> roles;
}

================
File: src/main/java/com/user/management/entity/Role.java
================
package com.user.management.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.user.management.constant.RoleEnum;
import jakarta.persistence.*;

import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@EntityListeners(AuditingEntityListener.class)
@Table(name = "roles")
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID roleId;

    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private RoleEnum roleName;

    @Column(length = 1000)
    private String description;

    private boolean isDeleted = false;

    @CreatedDate
    private LocalDateTime createdAt;

    @LastModifiedDate
    private LocalDateTime updatedAt;

    @ManyToMany(mappedBy = "roles")
    @JsonIgnore
    private Set<User> users = new HashSet<>();
}

================
File: src/main/java/com/user/management/entity/User.java
================
package com.user.management.entity;

import com.user.management.constant.StatusEnum;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@EntityListeners(AuditingEntityListener.class)
@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID userId;

    @Column(length = 100)
    private String fullName;

    @Column(length = 100, unique = true, nullable = false)
    private String username;

    @Column(length = 100, nullable = false)
    private String password;

    @Column(length = 100, unique = true)
    private String email;

    @Column(length = 10)
    private String phone;

    private String avatarUrl;

    @Enumerated(EnumType.STRING)
    private StatusEnum status = StatusEnum.active;

    @Column(nullable = false)
    private boolean isDeleted = false;

    @ManyToMany
    @JoinTable(
            name = "users_roles",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    private Set<Role> roles = new HashSet<>();

    @CreatedDate
    private LocalDateTime createdAt;

    @LastModifiedDate
    private LocalDateTime updatedAt;


}

================
File: src/main/java/com/user/management/exception/AppException.java
================
package com.user.management.exception;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.experimental.FieldDefaults;

@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Getter
public class AppException extends RuntimeException{
    ErrorCode errorCode;

    public AppException(ErrorCode errorCode) {
        super(errorCode.getMessage());
        this.errorCode = errorCode;
    }
}

================
File: src/main/java/com/user/management/exception/ErrorCode.java
================
package com.user.management.exception;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.experimental.FieldDefaults;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;

@AllArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Getter
public enum ErrorCode {

    USER_NOT_FOUND("User not found", HttpStatus.NOT_FOUND),
    USER_WITH_USERNAME_ALREADY_EXISTS("User with username already exists", HttpStatus.CONFLICT),
    USER_WITH_EMAIL_ALREADY_EXISTS( "User with email already exists", HttpStatus.CONFLICT),
    ROLE_NOT_FOUND("Role not found", HttpStatus.NOT_FOUND),
    ROLE_WITH_NAME_ALREADY_EXISTS("Role with name already exists", HttpStatus.CONFLICT),
    NOT_FOUND("Not found", HttpStatus.NOT_FOUND),
    AUTHENTICATION_FAILED("Authentication failed", HttpStatus.UNAUTHORIZED);

    String message;
    HttpStatusCode statusCode;
}

================
File: src/main/java/com/user/management/exception/GlobalExceptionHandler.java
================
package com.user.management.exception;

import com.user.management.dto.response.ErrorResponse;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

    @ExceptionHandler(value = Exception.class)
    public ResponseEntity<ErrorResponse> handleGeneralException(Exception e,
                                                                HttpServletRequest request) {
        log.error("An unexpected error occurred: {}", e.getMessage());
        return new ResponseEntity<>(
                ErrorResponse.builder()
                        .errorCode(HttpStatus.INTERNAL_SERVER_ERROR.toString())
                        .message("An unexpected error occurred. Please try again later.")
                        .timestamp(LocalDateTime.now())
                        .path(request.getRequestURI())
                        .build(),
                HttpStatus.INTERNAL_SERVER_ERROR
        );

    }

    @ExceptionHandler(value = AppException.class)
    public ResponseEntity<ErrorResponse> handleAppException(AppException e,
                                                            HttpServletRequest request) {
        log.error("AppException occurred: {}", e.getErrorCode().getMessage());
        ErrorCode errorCode = e.getErrorCode();
        return new ResponseEntity<>(
                ErrorResponse.builder()
                        .errorCode(HttpStatus.BAD_REQUEST.toString())
                        .message(e.getMessage())
                        .timestamp(LocalDateTime.now())
                        .path(request.getRequestURI())
                        .build(),
                errorCode.getStatusCode()
        );
    }

    @ExceptionHandler(value = MethodArgumentNotValidException.class)
    public ResponseEntity<ErrorResponse> handleMethodArgumentNotValidException(MethodArgumentNotValidException e,
                                                                    HttpServletRequest request) {
        log.error("Validation error: {}", e.getMessage());
        Map<String, String> errors = new HashMap<>();
        e.getBindingResult()
                .getFieldErrors()
                .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));
        return new ResponseEntity<>(
                ErrorResponse.builder()
                        .errorCode(HttpStatus.BAD_REQUEST.toString())
                        .message("Validation failed")
                        .timestamp(LocalDateTime.now())
                        .path(request.getRequestURI())
                        .errors(errors)
                        .build(),
                HttpStatus.BAD_REQUEST
        );
    }
}

================
File: src/main/java/com/user/management/mapper/RoleMapper.java
================
package com.user.management.mapper;

import com.user.management.dto.response.RoleResponse;
import com.user.management.entity.Role;
import org.mapstruct.Mapper;

@Mapper(componentModel = "spring")
public interface RoleMapper {

    RoleResponse convertToRoleResponse(Role role);
}

================
File: src/main/java/com/user/management/mapper/UserMapper.java
================
package com.user.management.mapper;

import com.user.management.dto.response.RegistrationResponse;
import com.user.management.dto.response.UserResponse;
import com.user.management.entity.User;
import org.mapstruct.Mapper;

@Mapper(componentModel = "spring")
public interface UserMapper {
    UserResponse convertToUserResponse(User user);
    RegistrationResponse convertToRegistrationResponse(User user);
}

================
File: src/main/java/com/user/management/repository/RoleRepository.java
================
package com.user.management.repository;

import com.user.management.constant.RoleEnum;
import com.user.management.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.Optional;
import java.util.UUID;

public interface RoleRepository extends JpaRepository<Role, UUID> {
    Optional<Role> findRoleByRoleName(@Param(value = "roleName") RoleEnum roleName);

    boolean existsRoleByRoleName(RoleEnum roleName);

    @Modifying
    @Query(value = "update Role r set r.isDeleted = true where r.roleId = :roleId")
    void softDeleteRoleByRoleId(@Param(value = "roleId") UUID roleId);

    @Modifying
    @Query(value = "update Role r set r.isDeleted = true where r.roleName = :roleName")
    void softDeleteRoleByRoleName(@Param(value = "roleName") RoleEnum roleName);
}

================
File: src/main/java/com/user/management/repository/UserRepository.java
================
package com.user.management.repository;

import com.user.management.entity.User;
import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.Optional;
import java.util.UUID;

public interface UserRepository extends JpaRepository<User, UUID> {
    boolean existsUserByUsername(String username);

    boolean existsUserByEmail(String email);

    @EntityGraph(attributePaths = "roles")
    Optional<User> findUserByUsername(String username);

    Optional<User> findUserByEmail(String email);

    @Modifying
    @Query(value = "update User u set u.isDeleted = true, u.status = 'nonactive' where u.userId = :userId")
    void softDeleteUserByUserId(@Param(value = "userId") UUID userId);
}

================
File: src/main/java/com/user/management/RestApiForUserManagementApplication.java
================
package com.user.management;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@SpringBootApplication
@EnableJpaAuditing
public class RestApiForUserManagementApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestApiForUserManagementApplication.class, args);
	}

}

================
File: src/main/java/com/user/management/security/CustomUserDetails.java
================
package com.user.management.security;

import com.user.management.constant.StatusEnum;
import com.user.management.entity.User;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.stream.Collectors;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class CustomUserDetails implements UserDetails {

    User user;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return user.getRoles()
                .stream()
                .map(role -> new SimpleGrantedAuthority("ROLE_" + role.getRoleName().name().toUpperCase()))
                .collect(Collectors.toSet());
    }

    @Override
    public String getPassword() {
        return user.getPassword();
    }

    @Override
    public String getUsername() {
        return user.getUsername();
    }

    @Override
    public boolean isAccountNonExpired() {
        return user.getStatus().equals(StatusEnum.active);
    }

    @Override
    public boolean isAccountNonLocked() {
        return user.getStatus().equals(StatusEnum.active);
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return user.getStatus().equals(StatusEnum.active);
    }

    @Override
    public boolean isEnabled() {
        return user.getStatus().equals(StatusEnum.active);
    }
}

================
File: src/main/java/com/user/management/security/CustomUserDetailsService.java
================
package com.user.management.security;

import com.user.management.entity.User;
import com.user.management.exception.AppException;
import com.user.management.exception.ErrorCode;
import com.user.management.repository.UserRepository;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

@Component
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class CustomUserDetailsService implements UserDetailsService {

    UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        log.info("Loading user by username: {}", username);
        User user = userRepository.findUserByUsername(username)
                .orElseThrow(
                        () -> new AppException(ErrorCode.USER_NOT_FOUND)
                );
        return new CustomUserDetails(user);
    }
}

================
File: src/main/java/com/user/management/service/AuthService.java
================
package com.user.management.service;

import com.user.management.dto.request.LoginRequest;
import com.user.management.dto.request.RegistrationRequest;
import com.user.management.dto.response.RegistrationResponse;
import org.springframework.security.core.Authentication;

public interface AuthService {
    Authentication login(LoginRequest loginRequest);
    RegistrationResponse register(RegistrationRequest registrationRequest);
}

================
File: src/main/java/com/user/management/service/implement/AuthServiceImpl.java
================
package com.user.management.service.implement;
import com.user.management.dto.request.LoginRequest;
import com.user.management.dto.request.RegistrationRequest;
import com.user.management.dto.response.RegistrationResponse;

import com.user.management.exception.AppException;
import com.user.management.exception.ErrorCode;

import com.user.management.service.AuthService;
import com.user.management.service.UserService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
@Slf4j
public class AuthServiceImpl implements AuthService {

    AuthenticationManager authenticationManager;
    UserService userService;

    @Override
    public Authentication login(LoginRequest loginRequest) {
        try {
            return authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            loginRequest.getUsername(),
                            loginRequest.getPassword()
                    )
            );
        } catch (Exception e) {
            log.error("Authentication failed for user: {}", loginRequest.getUsername(), e);
            throw new AppException(ErrorCode.AUTHENTICATION_FAILED);
        }
    }

    @Override
    public RegistrationResponse register(RegistrationRequest registrationRequest) {
        return userService.registerUser(registrationRequest);
    }
}

================
File: src/main/java/com/user/management/service/implement/RoleServiceImpl.java
================
package com.user.management.service.implement;

import com.user.management.constant.RoleEnum;
import com.user.management.dto.request.RoleRequest;
import com.user.management.dto.response.RoleResponse;
import com.user.management.entity.Role;
import com.user.management.exception.AppException;
import com.user.management.exception.ErrorCode;
import com.user.management.mapper.RoleMapper;
import com.user.management.repository.RoleRepository;
import com.user.management.service.RoleService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class RoleServiceImpl implements RoleService {

    RoleRepository roleRepository;
    RoleMapper roleMapper;

    @Override
    public List<RoleResponse> getAllRoles() {
        return roleRepository.findAll()
                .stream()
                .map(roleMapper::convertToRoleResponse)
                .toList();
    }

    @Override
    public RoleResponse getRoleByRoleId(UUID roleId) {
        Role role = getRoleEntityByRoleId(roleId);
        return roleMapper.convertToRoleResponse(role);
    }

    @Override
    public RoleResponse getRoleByRoleName(RoleEnum roleName) {
        Role role = getRoleEntityByRoleName(roleName);
        return roleMapper.convertToRoleResponse(role);
    }

    @Override
    public RoleResponse addRole(RoleRequest roleRequest) {
        RoleEnum roleName = roleRequest.getRoleName();
        if (roleRepository.existsRoleByRoleName(roleName))
            throw new AppException(ErrorCode.ROLE_WITH_NAME_ALREADY_EXISTS);

        Role role = new Role();
        role.setRoleName(roleName);
        role.setDescription(roleRequest.getDescription());

        role = roleRepository.save(role);
        return roleMapper.convertToRoleResponse(role);
    }

    @Override
    @Transactional
    public void softDeleteRoleByRoleId(UUID roleId) {
        roleRepository.softDeleteRoleByRoleId(roleId);
    }

    @Override
    @Transactional
    public void softDeleteRoleByRoleName(RoleEnum roleName) {
        roleRepository.softDeleteRoleByRoleName(roleName);
    }

    private Role getRoleEntityByRoleId(UUID roleId) {
        return roleRepository.findById(roleId)
                .orElseThrow(
                        () -> new AppException(ErrorCode.ROLE_NOT_FOUND)
                );
    }

    @Override
    public Role getRoleEntityByRoleName(RoleEnum roleName) {
        return roleRepository.findRoleByRoleName(roleName)
                .orElseThrow(
                        () -> new AppException(ErrorCode.ROLE_NOT_FOUND)
                );
    }
}

================
File: src/main/java/com/user/management/service/implement/UserServiceImpl.java
================
package com.user.management.service.implement;

import com.user.management.constant.RoleEnum;
import com.user.management.dto.request.RegistrationRequest;
import com.user.management.dto.request.UpdateStatusUserRequest;
import com.user.management.dto.request.UpdateUserRequest;
import com.user.management.dto.request.UserRequest;
import com.user.management.dto.response.RegistrationResponse;
import com.user.management.dto.response.UserResponse;
import com.user.management.entity.Role;
import com.user.management.entity.User;
import com.user.management.exception.AppException;
import com.user.management.exception.ErrorCode;
import com.user.management.mapper.UserMapper;
import com.user.management.repository.UserRepository;
import com.user.management.service.RoleService;
import com.user.management.service.UserService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

    UserRepository userRepository;
    RoleService roleService;
    UserMapper userMapper;
    PasswordEncoder passwordEncoder;

    @Override
    public List<UserResponse> getAllUsers() {
        return userRepository.findAll()
                .stream()
                .map(userMapper::convertToUserResponse)
                .toList();
    }

    @Override
    public UserResponse getUserByUserId(UUID userId) {
        User user = getUserEntityByUserId(userId);
        return userMapper.convertToUserResponse(user);
    }

    @Override
    public UserResponse getUserByUserName(String username) {
        User user = userRepository.findUserByUsername(username)
                .orElseThrow(
                        () -> new AppException(ErrorCode.USER_NOT_FOUND)
                );
        return userMapper.convertToUserResponse(user);
    }

    @Override
    public UserResponse addUser(UserRequest userRequest) {
        String username = userRequest.getUsername();
        if (userRepository.existsUserByUsername(username))
            throw new AppException(ErrorCode.USER_WITH_USERNAME_ALREADY_EXISTS);

        String email = userRequest.getEmail();
        if (userRepository.existsUserByEmail(email))
            throw new AppException(ErrorCode.USER_WITH_EMAIL_ALREADY_EXISTS);

        Set<RoleEnum> roles = userRequest.getRoles();

        User user = new User();
        user.setFullName(userRequest.getFullName());
        user.setUsername(username);
        user.setPassword(passwordEncoder.encode(userRequest.getPassword()));
        user.setEmail(email);
        user.setPhone(userRequest.getPhone());
        user.setAvatarUrl(userRequest.getAvatarUrl());

        if (roles != null && !roles.isEmpty()) {
            Set<Role> roleEntities = roles.stream()
                    .map(roleService::getRoleEntityByRoleName)
                    .collect(Collectors.toSet());
            user.setRoles(roleEntities);
        }
        user = userRepository.save(user);
        return userMapper.convertToUserResponse(user);
    }

    @Override
    public RegistrationResponse registerUser(RegistrationRequest registrationRequest) {
        String username = registrationRequest.getUsername();
        if (userRepository.existsUserByUsername(username))
            throw new AppException(ErrorCode.USER_WITH_USERNAME_ALREADY_EXISTS);

        String email = registrationRequest.getEmail();
        if (userRepository.existsUserByEmail(email))
            throw new AppException(ErrorCode.USER_WITH_EMAIL_ALREADY_EXISTS);

        User user = new User();
        user.setFullName(registrationRequest.getFullName());
        user.setUsername(username);
        user.setPassword(passwordEncoder.encode(registrationRequest.getPassword()));
        user.setEmail(email);
        user.setPhone(registrationRequest.getPhone());
        user.setAvatarUrl(registrationRequest.getAvatarUrl());

        Role userRole = roleService.getRoleEntityByRoleName(RoleEnum.user);
        user.setRoles(Set.of(userRole));

        user = userRepository.save(user);
        return userMapper.convertToRegistrationResponse(user);
    }

    @Override
    public UserResponse updateUserByUserId(UUID userId, UpdateUserRequest updateUserRequest) {
        User existingUserByUserId = getUserEntityByUserId(userId);

        User existingUserByEmail = userRepository.findUserByEmail(updateUserRequest.getEmail())
                .orElse(null);

        if (existingUserByEmail != null &&
            !existingUserByEmail.getUserId().equals(existingUserByUserId.getUserId())
        )
            throw new AppException(ErrorCode.USER_WITH_EMAIL_ALREADY_EXISTS);

        if (updateUserRequest.getFullName() != null)
            existingUserByUserId.setFullName(updateUserRequest.getFullName());
        if (updateUserRequest.getEmail() != null)
            existingUserByUserId.setEmail(updateUserRequest.getEmail());
        if (updateUserRequest.getPhone() != null)
            existingUserByUserId.setPhone(updateUserRequest.getPhone());
        if (updateUserRequest.getAvatarUrl() != null)
            existingUserByUserId.setAvatarUrl(updateUserRequest.getAvatarUrl());

        User updatedUser = userRepository.save(existingUserByUserId);
        return userMapper.convertToUserResponse(updatedUser);
    }

    @Override
    public UserResponse updateStatusUserByUserId(UUID userId, UpdateStatusUserRequest updateStatusUserRequest) {
        User user = getUserEntityByUserId(userId);
        user.setStatus(updateStatusUserRequest.getStatus());
        user = userRepository.save(user);
        return userMapper.convertToUserResponse(user);
    }

    @Override
    @Transactional
    public void deleteUserByUserId(UUID userId) {
        userRepository.softDeleteUserByUserId(userId);
    }

    private User getUserEntityByUserId(UUID userId) {
        return userRepository.findById(userId)
                .orElseThrow(
                        () -> new AppException(ErrorCode.USER_NOT_FOUND)
                );
    }
}

================
File: src/main/java/com/user/management/service/RoleService.java
================
package com.user.management.service;

import com.user.management.constant.RoleEnum;
import com.user.management.dto.request.RoleRequest;
import com.user.management.dto.response.RoleResponse;
import com.user.management.entity.Role;

import java.util.List;
import java.util.UUID;

public interface RoleService {
    List<RoleResponse> getAllRoles();
    RoleResponse getRoleByRoleId(UUID roleId);
    RoleResponse getRoleByRoleName(RoleEnum roleName);
    RoleResponse addRole(RoleRequest roleRequest);
    void softDeleteRoleByRoleId(UUID roleId);
    void softDeleteRoleByRoleName(RoleEnum roleName);
    Role getRoleEntityByRoleName(RoleEnum roleName);
}

================
File: src/main/java/com/user/management/service/UserService.java
================
package com.user.management.service;

import com.user.management.dto.request.RegistrationRequest;
import com.user.management.dto.request.UpdateStatusUserRequest;
import com.user.management.dto.request.UpdateUserRequest;
import com.user.management.dto.request.UserRequest;
import com.user.management.dto.response.RegistrationResponse;
import com.user.management.dto.response.UserResponse;

import java.util.List;
import java.util.UUID;

public interface UserService {
    List<UserResponse> getAllUsers();
    UserResponse getUserByUserId(UUID userId);
    UserResponse getUserByUserName(String username);
    UserResponse addUser(UserRequest userRequest);
    RegistrationResponse registerUser(RegistrationRequest registrationRequest);
    UserResponse updateUserByUserId(UUID userId, UpdateUserRequest updateUserRequest);
    UserResponse updateStatusUserByUserId(UUID userId, UpdateStatusUserRequest updateStatusUserRequest);
    void deleteUserByUserId(UUID userId);

}

================
File: src/main/resources/application.properties
================
spring.application.name=REST-API-for-User-Management

================
File: src/main/resources/application.yaml
================
server:
  port: 8080
spring:
  application:
    name: REST-API-for-User-Management
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://localhost:3306/user_management
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
logging:
  level:
    root: info
    web: debug

================
File: src/test/java/com/user/management/RestApiForUserManagementApplicationTests.java
================
package com.user.management;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class RestApiForUserManagementApplicationTests {

	@Test
	void contextLoads() {
	}

}
